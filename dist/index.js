(function(){'use strict';var a=new WeakMap,b=new WeakMap,c=new WeakMap,d={handlers:new WeakMap,instant:new WeakMap,uniques:new WeakMap,callbacks:new WeakMap,current:new WeakMap},e=function(a,b){b.get(a)&&(clearTimeout(b.get(a)),b.delete(a))},f=function(b,c){c.unobserve(b),e(b,a)},g=function(a,b){var e=d.uniques.get(a),g=d.callbacks.get(a),h=d.handlers.get(a),i=d.current.get(a);b&&!c.get(a)&&c.set(a,!0),i?h[b?0:1](a,g):h(a,g),e&&b&&f(a,b)},h=function(c,d,f){var h=c?b:a;h.set(d,setTimeout(function(){g(d,f),e(d,h)},500))},i=new IntersectionObserver(function(f,i){f.forEach(function(f){var j=d.instant.get(f.target);if(!f.isIntersecting){if(c.get(f.target)){if(j&&g(f.target),b.get(f.target)||j)return;h(!0,f.target)}return void e(f.target,a)}j&&g(f.target,i);a.get(f.target)||j||h(!1,f.target,i)})}),j=function(a,b){d.callbacks.set(a,b.arg),d.instant.set(a,b.modifiers.instant),d.uniques.set(a,b.modifiers.unique),d.current.set(a,b.modifiers.current),d.handlers.set(a,b.value)},k=function(e){d.callbacks.delete(e),d.instant.delete(e),d.uniques.delete(e),d.current.delete(e),d.handlers.delete(e),a.delete(e),b.delete(e),c.delete(e)},l={bind:function(a,b){j(a,b),i.observe(a)},unbind:function(a){k(a),i.unobserve(a)}};return{install:function(a){a.directive("is-intersecting",l)}}})();
